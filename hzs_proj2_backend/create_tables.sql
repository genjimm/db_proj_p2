DROP SCHEMA public CASCADE;
CREATE SCHEMA public;
SET search_path TO public;

CREATE TABLE users (
    id SERIAL PRIMARY KEY, 
    email VARCHAR(255) UNIQUE NOT NULL, 
    password VARCHAR(255) NOT NULL,
    phone_number VARCHAR(20),
    created_at TIMESTAMP DEFAULT NOW() 
);

CREATE TABLE HZS_AUTHOR 
    ( 
     AUTHOR_ID DECIMAL (20)  NOT NULL , 
     F_NAME    VARCHAR (30)  NOT NULL , 
     L_NAME    VARCHAR (30)  NOT NULL , 
     EMAIL     VARCHAR (30)  NOT NULL , 
     STATE     VARCHAR (30)  NOT NULL , 
     COUNTRY   VARCHAR (30)  NOT NULL , 
     STREET    VARCHAR (30)  NOT NULL , 
     CITY      VARCHAR (30)  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_AUTHOR.AUTHOR_ID IS 'This is the unique ID of the author.' 
;

COMMENT ON COLUMN HZS_AUTHOR.F_NAME IS 'First name of the author.' 
;

COMMENT ON COLUMN HZS_AUTHOR.L_NAME IS 'Last name of the author.' 
;

COMMENT ON COLUMN HZS_AUTHOR.EMAIL IS 'Contact email of the author.' 
;

COMMENT ON COLUMN HZS_AUTHOR.STATE IS 'State of residence of the author.' 
;

COMMENT ON COLUMN HZS_AUTHOR.COUNTRY IS 'Country of residence of the author.' 
;

COMMENT ON COLUMN HZS_AUTHOR.STREET IS 'Street address of the author.' 
;

COMMENT ON COLUMN HZS_AUTHOR.CITY IS 'City of residence of the author.' 
;

ALTER TABLE HZS_AUTHOR 
    ADD CONSTRAINT HZS_AUTHOR_PK PRIMARY KEY ( AUTHOR_ID ) ;

CREATE TABLE HZS_BOOK 
    ( 
     BOOK_ID DECIMAL (20)  NOT NULL , 
     B_NAME  VARCHAR (50)  NOT NULL , 
     TOPIC   VARCHAR (20)  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_BOOK.BOOK_ID IS 'This is the unique ID of the book.' 
;

COMMENT ON COLUMN HZS_BOOK.B_NAME IS 'The name of the book.' 
;

COMMENT ON COLUMN HZS_BOOK.TOPIC IS 'The topic category of the book.' 
;

ALTER TABLE HZS_BOOK 
    ADD CONSTRAINT HZS_BOOK_PK PRIMARY KEY ( BOOK_ID ) ;

CREATE TABLE HZS_BOOK_AUTHOR 
    ( 
     BOOK_ID   DECIMAL (20)  NOT NULL , 
     AUTHOR_ID DECIMAL (20)  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_BOOK_AUTHOR.BOOK_ID IS 'This is the unique ID of the book.' 
;

COMMENT ON COLUMN HZS_BOOK_AUTHOR.AUTHOR_ID IS 'This is the unique ID of the author.' 
;

ALTER TABLE HZS_BOOK_AUTHOR 
    ADD CONSTRAINT HZS_BOOK_AUTHOR_PK PRIMARY KEY ( AUTHOR_ID, BOOK_ID ) ;

CREATE TABLE HZS_BOOK_COPY 
    ( 
     COPY_ID DECIMAL (20)  NOT NULL , 
     STATUS  VARCHAR (20)  NOT NULL , 
     BOOK_ID DECIMAL (20) 
    ) 
;

COMMENT ON COLUMN HZS_BOOK_COPY.COPY_ID IS 'This is the unique ID of each book copy.' 
;

COMMENT ON COLUMN HZS_BOOK_COPY.STATUS IS 'Indicates whether the book copy is available or not.' 
;

COMMENT ON COLUMN HZS_BOOK_COPY.BOOK_ID IS 'This is the unique ID of the book.' 
;

ALTER TABLE HZS_BOOK_COPY 
    ADD CONSTRAINT HZS_BOOK_COPY_PK PRIMARY KEY ( COPY_ID ) ;

CREATE TABLE HZS_CUSTOMER 
    ( 
     CUSTOMER_ID DECIMAL (20)  NOT NULL , 
     L_NAME      VARCHAR (30)  NOT NULL , 
     F_NAME      VARCHAR (30)  NOT NULL , 
     PHONE       VARCHAR (20)  NOT NULL , 
     EMAIL       VARCHAR (100)  NOT NULL , 
     ID_TYPE     VARCHAR (20)  NOT NULL , 
     ID_NUM      VARCHAR (50)  NOT NULL,
     PASSWORD    VARCHAR (100) NOT NULL
    ) 
;

COMMENT ON COLUMN HZS_CUSTOMER.CUSTOMER_ID IS 'This is the unique ID of the customer.' 
;

COMMENT ON COLUMN HZS_CUSTOMER.L_NAME IS 'Last name of the customer.' 
;

COMMENT ON COLUMN HZS_CUSTOMER.F_NAME IS 'First name of the customer.' 
;

COMMENT ON COLUMN HZS_CUSTOMER.PHONE IS 'Customer contact number.' 
;

COMMENT ON COLUMN HZS_CUSTOMER.EMAIL IS 'Customer email address.' 
;

COMMENT ON COLUMN HZS_CUSTOMER.ID_TYPE IS 'Type of identification (Passport, SSN, or Driver License).' 
;

COMMENT ON COLUMN HZS_CUSTOMER.ID_NUM IS 'the sepecific number for the ID' 
;

ALTER TABLE HZS_CUSTOMER 
    ADD CONSTRAINT HZS_CUSTOMER_PK PRIMARY KEY ( CUSTOMER_ID ) ;

CREATE TABLE HZS_EVENT 
    ( 
     EVENT_ID       DECIMAL (20)  NOT NULL , 
     E_NAME         VARCHAR (30)  NOT NULL , 
     EVENT_TYPE     VARCHAR (1)  NOT NULL , 
     START_DATETIME TIMESTAMP(0)  NOT NULL , 
     STOP_DATETIME  TIMESTAMP(0)  NOT NULL , 
     TOPIC          VARCHAR (30)  NOT NULL 
    ) 
;

ALTER TABLE HZS_EVENT 
    ADD CONSTRAINT CH_INH_HZS_EVENT 
    CHECK (EVENT_TYPE IN ('E', 'S')) 
;

COMMENT ON COLUMN HZS_EVENT.EVENT_TYPE IS 'Seminar or Exhibition' 
;

ALTER TABLE HZS_EVENT 
    ADD CONSTRAINT HZS_EVENT_PK PRIMARY KEY ( EVENT_ID ) ;

CREATE TABLE HZS_EXHIBITION 
    ( 
     EVENT_ID DECIMAL (20)  NOT NULL , 
     EXPENSE  DECIMAL (10,2)  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_EXHIBITION.EXPENSE IS 'Expense of an exhibition.' 
;

ALTER TABLE HZS_EXHIBITION 
    ADD CONSTRAINT HZS_EXHIBITION_PKv1 PRIMARY KEY ( EVENT_ID ) ;

CREATE TABLE HZS_EXHIBITION_ACCESS 
    ( 
     REGISTRATION_ID DECIMAL (20)  NOT NULL , 
     CUSTOMER_ID     DECIMAL (20) , 
     EVENT_ID        DECIMAL (20) 
    ) 
;

COMMENT ON COLUMN HZS_EXHIBITION_ACCESS.REGISTRATION_ID IS 'This is the unique ID of the access.' 
;

COMMENT ON COLUMN HZS_EXHIBITION_ACCESS.CUSTOMER_ID IS 'This is the unique ID of the customer.' 
;

ALTER TABLE HZS_EXHIBITION_ACCESS 
    ADD CONSTRAINT HZS_EXHIBITION_ACCESS_PK PRIMARY KEY ( REGISTRATION_ID ) ;

CREATE TABLE HZS_INDIVIDUAL 
    ( 
     SPONSOR_ID DECIMAL (20)  NOT NULL , 
     F_NAME     VARCHAR (30)  NOT NULL , 
     L_NAME     VARCHAR (30)  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_INDIVIDUAL.SPONSOR_ID IS 'This is the unique ID of the sponsor.' 
;

COMMENT ON COLUMN HZS_INDIVIDUAL.F_NAME IS 'First name of the individual sponsor.' 
;

COMMENT ON COLUMN HZS_INDIVIDUAL.L_NAME IS 'Last name of the individual sponsor.' 
;

ALTER TABLE HZS_INDIVIDUAL 
    ADD CONSTRAINT HZS_INDIVIDUAL_PK PRIMARY KEY ( SPONSOR_ID ) ;

CREATE TABLE HZS_INVOICE 
    ( 
     INVOICE_ID     BIGINT  NOT NULL , 
     INVOICE_DATE   TIMESTAMP(0)  NOT NULL , 
     INVOIC__AMOUNT DECIMAL (10,2)  NOT NULL , 
     RENTAL_ID      DECIMAL (20)  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_INVOICE.INVOICE_ID IS 'This is the unique ID of the invoice.' 
;

COMMENT ON COLUMN HZS_INVOICE.INVOICE_DATE IS 'The date when the invoice was issued.' 
;

COMMENT ON COLUMN HZS_INVOICE.INVOIC__AMOUNT IS 'The total amount to be paid for the rental.' 
;

ALTER TABLE HZS_INVOICE 
    ADD CONSTRAINT HZS_INVOICE_PK PRIMARY KEY ( INVOICE_ID ) ;

CREATE TABLE HZS_ORGANIZATION 
    ( 
     SPONSOR_ID DECIMAL (20)  NOT NULL , 
     ORG_NAME   VARCHAR (50)  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_ORGANIZATION.SPONSOR_ID IS 'This is the unique ID of the sponsor.' 
;

COMMENT ON COLUMN HZS_ORGANIZATION.ORG_NAME IS 'The name of the sponsoring organization.' 
;

ALTER TABLE HZS_ORGANIZATION 
    ADD CONSTRAINT HZS_ORGANIZATION_PK PRIMARY KEY ( SPONSOR_ID ) ;

CREATE TABLE HZS_PAYMENT 
    ( 
     PAYMENT_ID         DECIMAL (20)  NOT NULL , 
     PAYMENT_DATE       TIMESTAMP(0)  NOT NULL ,
     METHOD             VARCHAR (10)  NOT NULL , 
     CARD_HOLDER_L_NAME VARCHAR (30)  NOT NULL , 
     CARD_HOLDER_F_NAME VARCHAR (30)  NOT NULL , 
     AMOUNT             DECIMAL (10,2)  NOT NULL , 
     INVOICE_ID         BIGINT NOT NULL
    ) 
;

COMMENT ON COLUMN HZS_PAYMENT.PAYMENT_ID IS 'This is the unique ID of the payment transaction.' 
;

COMMENT ON COLUMN HZS_PAYMENT.PAYMENT_DATE IS 'The date when the payment was made.' 
;

COMMENT ON COLUMN HZS_PAYMENT.METHOD IS 'Payment method used (Cash, Credit, Debit, PayPal).' 
;

COMMENT ON COLUMN HZS_PAYMENT.CARD_HOLDER_L_NAME IS 'Last name of the cardholder.' 
;

COMMENT ON COLUMN HZS_PAYMENT.CARD_HOLDER_F_NAME IS 'First name of the cardholder.' 
;

COMMENT ON COLUMN HZS_PAYMENT.AMOUNT IS 'The amount paid in the transaction.' 
;

COMMENT ON COLUMN HZS_PAYMENT.INVOICE_ID IS 'This is the unique ID of the invoice.' 
;

ALTER TABLE HZS_PAYMENT 
    ADD CONSTRAINT HZS_PAYMENT_PK PRIMARY KEY ( PAYMENT_ID ) ;

CREATE TABLE HZS_RENTAL 
    ( 
     RENTAL_ID            DECIMAL (20)  NOT NULL , 
     RENTAL_STATUS        VARCHAR (10)  NOT NULL , 
     BORROW_DATE          TIMESTAMP(0)  NOT NULL , 
     EXPECTED_RETURN_DATE TIMESTAMP(0)  NOT NULL , 
     ACTUAL_RETURN_DATE   TIMESTAMP(0) , 
     CUSTOMER_ID          DECIMAL (20) , 
     COPY_ID              DECIMAL (20)  NOT NULL 
    ) 
;

ALTER TABLE HZS_RENTAL 
    ADD CONSTRAINT HZS_RENTAL_PK PRIMARY KEY ( RENTAL_ID ) ;

CREATE TABLE HZS_ROOM_RESERVATION 
    ( 
     RESERVATION_ID    DECIMAL (20)  NOT NULL , 
     TOPIC_DESCRIPTION VARCHAR (100)  NOT NULL , 
     RESERVE_DATE            TIMESTAMP(0)  NOT NULL , 
     START_TIME        TIMESTAMP(0)  NOT NULL , 
     END_TIME          TIMESTAMP(0)  NOT NULL , 
     GROUP_SIZE        SMALLINT  NOT NULL , 
     CUSTOMER_ID       DECIMAL (20) , 
     ROOM_ID           DECIMAL (20) , 
     L_NAME            VARCHAR (30)  NOT NULL , 
     F_NAME            VARCHAR (30)  NOT NULL 
    ) 
;

-- ALTER TABLE HZS_ROOM_RESERVATION RENAME COLUMN "DATE" TO RESERVE_DATE;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.RESERVATION_ID IS 'This is the unique ID of the room reservation.' 
;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.TOPIC_DESCRIPTION IS 'A brief description of the study topic for the reservation.' 
;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.RESERVE_DATE IS 'The date on which the study room is reserved.' 
;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.START_TIME IS 'The start time of the study room reservation.' 
;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.END_TIME IS 'The end time of the study room reservation.' 
;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.GROUP_SIZE IS 'The total number of people in the group reservation.' 
;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.CUSTOMER_ID IS 'This is the unique ID of the customer.' 
;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.ROOM_ID IS 'This is the unique ID of the room.' 
;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.L_NAME IS 'Last name of the person who made the reservation.' 
;

COMMENT ON COLUMN HZS_ROOM_RESERVATION.F_NAME IS 'First name of the person who made the reservation.' 
;

ALTER TABLE HZS_ROOM_RESERVATION 
    ADD CONSTRAINT HZS_ROOM_RESERVATION_PK PRIMARY KEY ( RESERVATION_ID ) ;

CREATE TABLE HZS_SEMINAR 
    ( 
     EVENT_ID DECIMAL (20)  NOT NULL , 
     DESCRIP  VARCHAR (100)  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_SEMINAR.DESCRIP IS 'Description of a seminar' 
;

ALTER TABLE HZS_SEMINAR 
    ADD CONSTRAINT HZS_SEMINAR_PKv1 PRIMARY KEY ( EVENT_ID ) ;

CREATE TABLE HZS_SEMINAR_ACCESS 
    ( 
     INVITATION_ID VARCHAR (20)  NOT NULL , 
     AUTHOR_ID     DECIMAL (20) , 
     EVENT_ID      DECIMAL (20) 
    ) 
;

COMMENT ON COLUMN HZS_SEMINAR_ACCESS.INVITATION_ID IS 'This is the unique ID of the invitation.' 
;

COMMENT ON COLUMN HZS_SEMINAR_ACCESS.AUTHOR_ID IS 'This is the unique ID of the author.' 
;

ALTER TABLE HZS_SEMINAR_ACCESS 
    ADD CONSTRAINT HZS_SEMINAR_ACCESS_PK PRIMARY KEY ( INVITATION_ID ) ;

CREATE TABLE HZS_SEMINAR_SPONSOR 
    ( 
     SPONSOR_ID DECIMAL (20)  NOT NULL , 
     EVENT_ID   DECIMAL (20)  NOT NULL , 
     AMOUNT     DECIMAL (10,2)  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_SEMINAR_SPONSOR.AMOUNT IS 'The amount sponsored for a seminar.' 
;

ALTER TABLE HZS_SEMINAR_SPONSOR 
    ADD CONSTRAINT HZS_SEMINAR_SPONSOR_PK PRIMARY KEY ( EVENT_ID, SPONSOR_ID ) ;

CREATE TABLE HZS_SPONSOR 
    ( 
     SPONSOR_ID   DECIMAL (20)  NOT NULL , 
     SPONSOR_TYPE VARCHAR (1)  NOT NULL 
    ) 
;

ALTER TABLE HZS_SPONSOR 
    ADD CONSTRAINT CH_INH_HZS_SPONSOR 
    CHECK (SPONSOR_TYPE IN ('I', 'O')) 
;

COMMENT ON COLUMN HZS_SPONSOR.SPONSOR_ID IS 'This is the unique ID of the sponsor.' 
;

COMMENT ON COLUMN HZS_SPONSOR.SPONSOR_TYPE IS 'The type of sponsor (Individual or Organization).' 
;

ALTER TABLE HZS_SPONSOR 
    ADD CONSTRAINT HZS_SPONSOR_PK PRIMARY KEY ( SPONSOR_ID ) ;

CREATE TABLE HZS_STUDY_ROOM 
    ( 
     ROOM_ID  DECIMAL (20)  NOT NULL , 
     CAPACITY SMALLINT  NOT NULL 
    ) 
;

COMMENT ON COLUMN HZS_STUDY_ROOM.ROOM_ID IS 'This is the unique ID of the room.' 
;

COMMENT ON COLUMN HZS_STUDY_ROOM.CAPACITY IS 'The maximum number of people the room can hold.' 
;

ALTER TABLE HZS_STUDY_ROOM 
    ADD CONSTRAINT HZS_STUDY_ROOM_PK PRIMARY KEY ( ROOM_ID ) ;

ALTER TABLE HZS_BOOK_AUTHOR 
    ADD CONSTRAINT BOOK_AUTHOR_AUTHOR_FK FOREIGN KEY 
    ( 
     AUTHOR_ID
    ) 
    REFERENCES HZS_AUTHOR 
    ( 
     AUTHOR_ID
    ) 
;

ALTER TABLE HZS_BOOK_AUTHOR 
    ADD CONSTRAINT BOOK_AUTHOR_BOOK_FK FOREIGN KEY 
    ( 
     BOOK_ID
    ) 
    REFERENCES HZS_BOOK 
    ( 
     BOOK_ID
    ) 
;

ALTER TABLE HZS_EXHIBITION_ACCESS 
    ADD CONSTRAINT EXHIBITION_ACC_CUSTOMER_FK FOREIGN KEY 
    ( 
     CUSTOMER_ID
    ) 
    REFERENCES HZS_CUSTOMER 
    ( 
     CUSTOMER_ID
    ) 
;

ALTER TABLE HZS_EXHIBITION_ACCESS 
    ADD CONSTRAINT EXHIBITION_ACC_EXHIBITION_FK FOREIGN KEY 
    ( 
     EVENT_ID
    ) 
    REFERENCES HZS_EXHIBITION 
    ( 
     EVENT_ID
    ) 
;

ALTER TABLE HZS_BOOK_COPY 
    ADD CONSTRAINT HZS_BOOK_COPY_HZS_BOOK_FK FOREIGN KEY 
    ( 
     BOOK_ID
    ) 
    REFERENCES HZS_BOOK 
    ( 
     BOOK_ID
    ) 
;

ALTER TABLE HZS_EXHIBITION 
    ADD CONSTRAINT HZS_EXHIBITION_HZS_EVENT_FK FOREIGN KEY 
    ( 
     EVENT_ID
    ) 
    REFERENCES HZS_EVENT 
    ( 
     EVENT_ID
    ) 
;

ALTER TABLE HZS_INDIVIDUAL 
    ADD CONSTRAINT HZS_INDIVIDUAL_HZS_SPONSOR_FK FOREIGN KEY 
    ( 
     SPONSOR_ID
    ) 
    REFERENCES HZS_SPONSOR 
    ( 
     SPONSOR_ID
    ) 
;

ALTER TABLE HZS_INVOICE 
    ADD CONSTRAINT HZS_INVOICE_HZS_RENTAL_FK FOREIGN KEY 
    ( 
     RENTAL_ID
    ) 
    REFERENCES HZS_RENTAL 
    ( 
     RENTAL_ID
    ) 
;

ALTER TABLE HZS_PAYMENT 
    ADD CONSTRAINT HZS_PAYMENT_HZS_INVOICE_FK FOREIGN KEY 
    ( 
     INVOICE_ID
    ) 
    REFERENCES HZS_INVOICE 
    ( 
     INVOICE_ID
    ) 
;

ALTER TABLE HZS_RENTAL 
    ADD CONSTRAINT HZS_RENTAL_HZS_BOOK_COPY_FK FOREIGN KEY 
    ( 
     COPY_ID
    ) 
    REFERENCES HZS_BOOK_COPY 
    ( 
     COPY_ID
    ) 
;

ALTER TABLE HZS_RENTAL 
    ADD CONSTRAINT HZS_RENTAL_HZS_CUSTOMER_FK FOREIGN KEY 
    ( 
     CUSTOMER_ID
    ) 
    REFERENCES HZS_CUSTOMER 
    ( 
     CUSTOMER_ID
    ) 
;

ALTER TABLE HZS_SEMINAR 
    ADD CONSTRAINT HZS_SEMINAR_HZS_EVENT_FK FOREIGN KEY 
    ( 
     EVENT_ID
    ) 
    REFERENCES HZS_EVENT 
    ( 
     EVENT_ID
    ) 
;

ALTER TABLE HZS_ORGANIZATION 
    ADD CONSTRAINT ORGANIZATION_SPONSOR_FK FOREIGN KEY 
    ( 
     SPONSOR_ID
    ) 
    REFERENCES HZS_SPONSOR 
    ( 
     SPONSOR_ID
    ) 
;

ALTER TABLE HZS_ROOM_RESERVATION 
    ADD CONSTRAINT RESERVATION_CUSTOMER_FK FOREIGN KEY 
    ( 
     CUSTOMER_ID
    ) 
    REFERENCES HZS_CUSTOMER 
    ( 
     CUSTOMER_ID
    ) 
;

ALTER TABLE HZS_ROOM_RESERVATION 
    ADD CONSTRAINT RESERVATION_STUDY_ROOM_FK FOREIGN KEY 
    ( 
     ROOM_ID
    ) 
    REFERENCES HZS_STUDY_ROOM 
    ( 
     ROOM_ID
    ) 
;

ALTER TABLE HZS_SEMINAR_ACCESS 
    ADD CONSTRAINT SEMINAR_ACCESS_SEMINAR_FK FOREIGN KEY 
    ( 
     EVENT_ID
    ) 
    REFERENCES HZS_SEMINAR 
    ( 
     EVENT_ID
    ) 
;

ALTER TABLE HZS_SEMINAR_ACCESS 
    ADD CONSTRAINT SEMINAR_AUTHOR_FK FOREIGN KEY 
    ( 
     AUTHOR_ID
    ) 
    REFERENCES HZS_AUTHOR 
    ( 
     AUTHOR_ID
    ) 
;

ALTER TABLE HZS_SEMINAR_SPONSOR 
    ADD CONSTRAINT SEMINAR_SPONSOR_SPONSOR_FK FOREIGN KEY 
    ( 
     SPONSOR_ID
    ) 
    REFERENCES HZS_SPONSOR 
    ( 
     SPONSOR_ID
    ) 
;

ALTER TABLE HZS_SEMINAR_SPONSOR 
    ADD CONSTRAINT SPONSOR_SEMINAR_FK FOREIGN KEY 
    ( 
     EVENT_ID
    ) 
    REFERENCES HZS_SEMINAR 
    ( 
     EVENT_ID
    ) 
;

CREATE OR REPLACE FUNCTION ARC_FKArc_5_HZS_ORGANIZATION_func() RETURNS TRIGGER AS $$  
DECLARE 
    d VARCHAR (1); 
BEGIN 
    SELECT A.SPONSOR_TYPE INTO d 
    FROM HZS_SPONSOR A 
    WHERE A.SPONSOR_ID = NEW.SPONSOR_ID; 
    IF (d IS NULL OR d <> 'O') THEN 
        RAISE EXCEPTION '%s', 'FK ORGANIZATION_SPONSOR_FK in Table HZS_ORGANIZATION violates Arc constraint on Table HZS_SPONSOR - discriminator column SPONSOR_TYPE doesn''t have value ''O''';
     
    END IF; 
   
    RETURN NEW;
END; 

$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER ARC_FKArc_5_HZS_ORGANIZATION 
BEFORE INSERT OR UPDATE OF SPONSOR_ID 
ON HZS_ORGANIZATION 
FOR EACH ROW
EXECUTE FUNCTION ARC_FKArc_5_HZS_ORGANIZATION_func();

-- trigger for individual
CREATE OR REPLACE FUNCTION ARC_FKArc_5_HZS_INDIVIDUAL_func() RETURNS TRIGGER AS $$  
DECLARE 
    d VARCHAR(1); 
BEGIN 
    SELECT A.SPONSOR_TYPE INTO d 
    FROM HZS_SPONSOR A 
    WHERE A.SPONSOR_ID = NEW.SPONSOR_ID; 

    IF (d IS NULL OR d <> 'I') THEN 
        RAISE EXCEPTION 'FK HZS_INDIVIDUAL_HZS_SPONSOR_FK in Table HZS_INDIVIDUAL violates Arc constraint on Table HZS_SPONSOR - discriminator column SPONSOR_TYPE doesn''t have value ''I'''
        USING ERRCODE = 'P0001'; 
    END IF; 

    RETURN NEW;
END; 
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER ARC_FKArc_5_HZS_INDIVIDUAL 
BEFORE INSERT OR UPDATE OF SPONSOR_ID 
ON HZS_INDIVIDUAL 
FOR EACH ROW
EXECUTE FUNCTION ARC_FKArc_5_HZS_INDIVIDUAL_func();


-- trigger for exhibition
CREATE OR REPLACE FUNCTION ARC_FKArc_4_HZS_EXHIBITION_func() RETURNS TRIGGER AS $$  
DECLARE 
    d VARCHAR(1); 
BEGIN 
    SELECT A.EVENT_TYPE INTO d 
    FROM HZS_EVENT A 
    WHERE A.EVENT_ID = NEW.EVENT_ID; 

    IF (d IS NULL OR d <> 'E') THEN 
        RAISE EXCEPTION 'FK HZS_EXHIBITION_HZS_EVENT_FK in Table HZS_EXHIBITION violates Arc constraint on Table HZS_EVENT - discriminator column EVENT_TYPE doesn''t have value ''E'''
        USING ERRCODE = 'P0001'; 
    END IF; 

    RETURN NEW;
END; 
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER ARC_FKArc_4_HZS_EXHIBITION 
BEFORE INSERT OR UPDATE OF EVENT_ID 
ON HZS_EXHIBITION 
FOR EACH ROW
EXECUTE FUNCTION ARC_FKArc_4_HZS_EXHIBITION_func();

-- trigger for seminar
CREATE OR REPLACE FUNCTION ARC_FKArc_4_HZS_SEMINAR_func() RETURNS TRIGGER AS $$  
DECLARE 
    d VARCHAR(1); 
BEGIN 
    SELECT A.EVENT_TYPE INTO d 
    FROM HZS_EVENT A 
    WHERE A.EVENT_ID = NEW.EVENT_ID; 

    IF (d IS NULL OR d <> 'S') THEN 
        RAISE EXCEPTION 'FK HZS_SEMINAR_HZS_EVENT_FK in Table HZS_SEMINAR violates Arc constraint on Table HZS_EVENT - discriminator column EVENT_TYPE doesn''t have value ''S'''
        USING ERRCODE = 'P0001'; 
    END IF; 

    RETURN NEW;
END; 
$$ LANGUAGE plpgsql;

CREATE OR REPLACE TRIGGER ARC_FKArc_4_HZS_SEMINAR 
BEFORE INSERT OR UPDATE OF EVENT_ID 
ON HZS_SEMINAR 
FOR EACH ROW
EXECUTE FUNCTION ARC_FKArc_4_HZS_SEMINAR_func();


-- Create a sequence for invoice IDs
CREATE SEQUENCE seq_invoice_id START WITH 1 INCREMENT BY 1;


CREATE OR REPLACE FUNCTION trg_generate_invoice_func() RETURNS TRIGGER AS $$
DECLARE
    v_days_borrowed NUMERIC;
    v_days_late NUMERIC;
    v_invoice_amount NUMERIC;
BEGIN
    -- Check if ACTUAL_RETURN_DATE is not NULL
    IF NEW.ACTUAL_RETURN_DATE IS NOT NULL THEN
        -- Calculate the number of days borrowed
        v_days_borrowed := EXTRACT(DAY FROM (NEW.ACTUAL_RETURN_DATE - NEW.BORROW_DATE));

        -- Calculate the invoice amount based on return dates
        IF NEW.ACTUAL_RETURN_DATE <= NEW.EXPECTED_RETURN_DATE THEN
            v_invoice_amount := v_days_borrowed * 0.2;
        ELSE
            v_days_borrowed := EXTRACT(DAY FROM (NEW.EXPECTED_RETURN_DATE - NEW.BORROW_DATE));
            v_days_late := EXTRACT(DAY FROM (NEW.ACTUAL_RETURN_DATE - NEW.EXPECTED_RETURN_DATE));
            v_invoice_amount := (v_days_borrowed * 0.2) + (v_days_late * 0.4);
        END IF;

        -- Insert the invoice into the HZS_INVOICE table
        INSERT INTO HZS_INVOICE (INVOICE_ID, RENTAL_ID, INVOICE_DATE, INVOIC__AMOUNT)
        VALUES (nextval('seq_invoice_id'), NEW.RENTAL_ID, CURRENT_TIMESTAMP, v_invoice_amount);
    END IF;

    -- Return NEW for the trigger
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;


-- Create the trigger for the HZS_RENTAL table
CREATE OR REPLACE TRIGGER trg_generate_invoice
AFTER INSERT OR UPDATE OF ACTUAL_RETURN_DATE ON HZS_RENTAL
FOR EACH ROW
EXECUTE FUNCTION trg_generate_invoice_func();

